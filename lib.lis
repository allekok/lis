(define not (lambda (x) (if x 0 1)))
(define and (lambda (x y) (if x y 0)))
(define or (lambda (x y) (if x 1 y)))
(define nand (lambda (x y) (not (and x y))))
(define xor (lambda (x y) (nand (or x y) (and x y))))
(define cons (lambda (x y) (lambda (f) (f x y))))
(define car (lambda (c) (c (lambda (x y) x))))
(define cdr (lambda (c) (c (lambda (x y) y))))
(define _+ (lambda (x y) (cons (xor x y) (and x y))))
(define + (lambda (x y) (if (eq? nil (cdr x)) nil (cons (_+ (car x) (car y)) (+ (cdr x) (cdr y))))))
